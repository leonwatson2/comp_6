import java_cup.runtime.*;

action code {: SymbolTable currentEnv, env; :};

terminal String ID;
terminal String INTEGER;
terminal AND, OR, NOT;
terminal String LT, LE, GT, GE, EQ, NE;
terminal PLUS, MINUS, TIMES, SLASH;
terminal COLON, SEMICOLON, DOT, COMMA;
terminal LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, ASSIGN, INPUT, OUTPUT;
terminal CIN, CLASS, COUT, ELSE, IF, INCLUDE, INT, IOSTREAM, NAMESPACE;
terminal PUBLIC, RETURN, STD, USING, WHILE;

non terminal SymbolTable program;
non terminal externalDefinitionList;
non terminal externalDefinition;
non terminal functionDefinition;
non terminal declaration;
non terminal Type simpleTypeName;
non terminal declaratorList;
non terminal Declarator declarator;
non terminal argumentDeclarationListOption;
non terminal argumentDeclarationList;
non terminal classSpecifier;
non terminal memberList;
non terminal memberDeclaration;
non terminal compoundStatement;
non terminal statementListOption;
non terminal statementList;
non terminal statement;
non terminal assignmentStatement;
non terminal elseOption;
non terminal expressionListOption;
non terminal expressionList;
non terminal Expression expression;
non terminal Expression andExpression;
non terminal Expression relationalExpression;
non terminal Expression arithmeticExpression;
non terminal Expression term;
non terminal Expression factor;
non terminal Expression primaryExpression;
non terminal String addingOperator;
non terminal String multiplyingOperator;
non terminal String relationalOperator;
non terminal String unaryOperator;
non terminal object;
non terminal Expression variable;
non terminal Expression classMember;
non terminal Expression subscriptList;
non terminal Expression functionCall;
non terminal String classId;
non terminal String objectId;
non terminal String functionId;
non terminal coutStatement;
non terminal cinStatement;
non terminal ifStatement;
non terminal whileStatement;

precedence left ELSE;


start with program;

program ::= 
    INCLUDE IOSTREAM USING NAMESPACE STD SEMICOLON 
    {: env = new SymbolTable (null); env.emitHeader("#include <stdio.h>"); /* start new scope */ :}
    externalDefinitionList {: RESULT = env; :} ;

externalDefinitionList ::= externalDefinition 
  | externalDefinitionList externalDefinition ;

externalDefinition ::= functionDefinition | declaration ;

functionDefinition ::= 
    /*sum*/
    simpleTypeName:type functionId:id 
    {:
      currentEnv = env;             /* save current env */
      env = new SymbolTable (currentEnv); /* start new scope */
    :}
    
    /*(x,y)*/
    LPAREN argumentDeclarationListOption RPAREN 
    {:
      currentEnv . enterFunc (id, type, env); /* to allow recursive calls */
    :}
    LBRACE 
    /* int temp;
        temp = x + y;
        return temp;
    */
    declaratorList statementListOption RETURN expression:e SEMICOLON RBRACE 
    {: 
      env.emitReturnStatement(e);
      currentEnv . enterFuncCode (id, ""); /* add code to function entry */
      env = env . parent (); /* restore env */ 
    :} ;


declaration ::= classSpecifier SEMICOLON 
  | declarator:decl SEMICOLON 
    {:
      env . enterVar (decl . id (), decl . type (), false);
    :} ;

simpleTypeName ::= 
    classId:id {: RESULT = new ObjectType (id, env . entry (id)); :}
  | INT {: RESULT = new IntegerType (); :} ;

declaratorList ::= 
    declaratorList declarator:decl SEMICOLON 
    {:
      env . enterVar (decl . id (), decl . type (), false);
    :}
  | ;

declarator ::= 
    simpleTypeName:type objectId:id 
    {: 
      RESULT = new Declarator (id, type); 
    :}
  | declarator:decl LBRACK INTEGER:dimension RBRACK 
    {:
      RESULT = new Declarator (decl . id (), 
        new ArrayType (Integer . parseInt (dimension), decl . type ()), true);
    :} ;

argumentDeclarationListOption ::= argumentDeclarationList | ;

argumentDeclarationList ::= 
    argumentDeclarationList COMMA declarator:decl
    {:
      env.emitFunctionParamStatement(decl);
      env . enterVar (decl . id (), decl . type (), true);
    :}
  | 

  declarator:decl
    {:
      env.emitFunctionParamStatement(decl);
      env . enterVar (decl . id (), decl . type (), true);
    :} ;

classSpecifier ::= 
    CLASS classId:id LBRACE RBRACE 
      {: env . enterClass (id, new SymbolTable (env)); :}
  | CLASS classId:id LBRACE
      {:
        currentEnv = env;                   /* save current env */
        env = new SymbolTable (currentEnv); /* start new scope */
        currentEnv . enterClass (id, env);
      :}
    PUBLIC COLON memberList RBRACE 
      {:
        env = env . parent (); /* restore env */
      :} ;


memberList ::= memberList memberDeclaration | memberDeclaration ;

memberDeclaration ::= 
    declarator:decl SEMICOLON 
    {:
      env . enterVar (decl . id (), decl . type (), false);
    :}
  | functionDefinition ;

statement ::= compoundStatement {:  :}
  | assignmentStatement SEMICOLON {:  :}
  | cinStatement {:  :}
  | coutStatement {:  :}
  | ifStatement {: env.newLabel(); env.emitLabel(); :}
  | whileStatement {: env.newLabel(); env.emitLabel();  :};

coutStatement ::= COUT OUTPUT expression:e SEMICOLON {: env.emitPrintStatement(e); :};
cinStatement ::= CIN INPUT variable:e SEMICOLON {: env.emitScanStatement(e); :};
ifStatement ::= IF LPAREN expression RPAREN statement elseOption;
whileStatement ::= 
  {: env.newLabel(); env.emitLabel();:} 
    WHILE LPAREN expression RPAREN statement 
    {: env.emitGoto(env.currentLabel - 1); :};

compoundStatement ::= LBRACE statementList RBRACE ;

statementListOption ::= statementList | ;

statementList ::= statementList statement | statement ;

assignmentStatement ::= variable:e ASSIGN expression:e2 {: env.emitAssign(e, e2); :};

elseOption ::= ELSE statement | ;

expression ::= expression OR andExpression | andExpression:e {: RESULT=e; :} ;

andExpression ::= andExpression AND relationalExpression
  | relationalExpression:e {: RESULT=e; :} ;

relationalExpression ::= 
    relationalExpression:e relationalOperator:oper arithmeticExpression:e2 
    {: env.newLabel(); env.emitIfStatement(e, e2, oper);  :}
  | arithmeticExpression:e 
    {: RESULT = e; :};

relationalOperator ::= LT:val {: RESULT=" < "; :} 
                      | LE:val {: RESULT=" <= "; :} 
                      | GT:val {: RESULT=" > "; :} 
                      | GE:val {: RESULT=" >= "; :} 
                      | EQ:val {: RESULT=" == "; :} 
                      | NE:val {: RESULT=" != "; :} 
                      ;

arithmeticExpression ::= term:e {: RESULT = e; :} 
                      | arithmeticExpression:e addingOperator:oper term:e2 
                        {: RESULT = env.emitThreeAddress(e, e2, oper);  env.newTemp();  :};

addingOperator ::= PLUS {: RESULT=" + "; :}| MINUS {: RESULT=" - "; :};

term ::= factor:e 
        {: RESULT = e; :} 
        | term:e multiplyingOperator:oper factor:e2 
        {: RESULT = env.emitThreeAddress(e, e2, oper);  env.newTemp(); :};

multiplyingOperator ::= TIMES{: RESULT=" * "; :} | SLASH{: RESULT=" / "; :} ;

factor ::= primaryExpression:e {: RESULT=e; :} | unaryOperator factor ;

unaryOperator ::= addingOperator | NOT ;

primaryExpression ::= variable:e 
                    {: 
                      if(e.isArray){ RESULT = env.emitArrayAssign(e); env.newTemp(); } else RESULT=e; 
                    :} 
                    | INTEGER:val 
                    {: RESULT=new Expression(val, false); :} 
                    | LPAREN expression:e RPAREN {: RESULT = e; :};

variable ::= classMember:e {: RESULT=e; :} | variable DOT classMember:e {: RESULT=e; :};

classMember ::= objectId:id subscriptList:sub 
            {: 
              if(sub != null){ Expression e = new Expression(id, true); e.exp = sub; RESULT=e;} else { RESULT=new Expression(id, false); } 

            :} | functionCall:e 
            {:
              RESULT = e;
            :} ;

subscriptList ::= subscriptList LBRACK expression:e RBRACK {: RESULT = e; :}| ;

functionCall ::= functionId:id LPAREN expressionListOption RPAREN 
          {: RESULT = new Expression(env.emitParamsListStatement(id), false, env.paramList);  env.newTemp(); :}
  | object DOT functionId:id LPAREN expressionListOption RPAREN 
        {: RESULT = new Expression(id + ".", false); :}; 
}

expressionListOption ::= expressionList | ;

expressionList ::= expressionList COMMA expression:e {: env.addParam(e); :}| expression:e {: env.addParam(e); :} ;

classId ::= ID:id {: RESULT = id; :} ;

objectId ::= ID:id {: RESULT = id; :} ;

functionId ::= ID:id {: RESULT = id; :} ;
